// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartElectricityAPI.Database;

#nullable disable

namespace SmartElectricityAPI.Migrations
{
    [DbContext(typeof(MySQLDBContext))]
    [Migration("20230802150315_InvertTypeCommandsData")]
    partial class InvertTypeCommandsData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SmartElectricityAPI.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double>("NetworkFeeDayTime")
                        .HasColumnType("double");

                    b.Property<double>("NetworkFeeNightTime")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Posti",
                            Name = "Jäämari",
                            NetworkFeeDayTime = 9.0,
                            NetworkFeeNightTime = 5.0
                        },
                        new
                        {
                            Id = 2,
                            Address = "Kiriku tee",
                            Name = "TM ERP Solutions OÜ",
                            NetworkFeeDayTime = 8.0,
                            NetworkFeeNightTime = 4.0
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("FirstHourPercentageKwPriceRequirementBeforeHeating")
                        .HasColumnType("double");

                    b.Property<bool>("ForcedOff")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ForcedOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("ForcedOnPercentageForComingHourToEnable")
                        .HasColumnType("double");

                    b.Property<bool>("FuseboxForcedOff")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FuseboxForcedOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("MaxForcedOnHoursIn24h")
                        .HasColumnType("double");

                    b.Property<double>("MaxStopHoursConsecutive")
                        .HasColumnType("double");

                    b.Property<double>("MaxStopHoursIn24h")
                        .HasColumnType("double");

                    b.Property<bool>("MediumOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("TemperatureInForcedOnMode")
                        .HasColumnType("double");

                    b.Property<double?>("TemperatureInStandardMode")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Device");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            FirstHourPercentageKwPriceRequirementBeforeHeating = 10.0,
                            ForcedOff = true,
                            ForcedOn = true,
                            ForcedOnPercentageForComingHourToEnable = 50.0,
                            FuseboxForcedOff = true,
                            FuseboxForcedOn = true,
                            MaxForcedOnHoursIn24h = 10.0,
                            MaxStopHoursConsecutive = 8.0,
                            MaxStopHoursIn24h = 8.0,
                            MediumOn = false,
                            Name = "Õhk-Vesi Põrand"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            FirstHourPercentageKwPriceRequirementBeforeHeating = 20.0,
                            ForcedOff = true,
                            ForcedOn = true,
                            ForcedOnPercentageForComingHourToEnable = 50.0,
                            FuseboxForcedOff = true,
                            FuseboxForcedOn = true,
                            MaxForcedOnHoursIn24h = 10.0,
                            MaxStopHoursConsecutive = 2.0,
                            MaxStopHoursIn24h = 6.0,
                            MediumOn = false,
                            Name = "Õhk-Vesi Boiler"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            FirstHourPercentageKwPriceRequirementBeforeHeating = 43.0,
                            ForcedOff = true,
                            ForcedOn = true,
                            ForcedOnPercentageForComingHourToEnable = 100.0,
                            FuseboxForcedOff = true,
                            FuseboxForcedOn = true,
                            MaxForcedOnHoursIn24h = 10.0,
                            MaxStopHoursConsecutive = 3.0,
                            MaxStopHoursIn24h = 6.0,
                            MediumOn = false,
                            Name = "Tava boiler",
                            TemperatureInForcedOnMode = 65.0,
                            TemperatureInStandardMode = 55.0
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 1,
                            FirstHourPercentageKwPriceRequirementBeforeHeating = 30.0,
                            ForcedOff = false,
                            ForcedOn = true,
                            ForcedOnPercentageForComingHourToEnable = 200.0,
                            FuseboxForcedOff = false,
                            FuseboxForcedOn = true,
                            MaxForcedOnHoursIn24h = 2.0,
                            MaxStopHoursConsecutive = 0.0,
                            MaxStopHoursIn24h = 0.0,
                            MediumOn = false,
                            Name = "Külmik"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.DeviceCompanyHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("SpotPriceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SpotPriceId");

                    b.HasIndex("DeviceId", "SpotPriceId", "CompanyId", "ActionType")
                        .IsUnique();

                    b.ToTable("DeviceCompanyHours");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.DeviceHoursNoCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId", "Time")
                        .IsUnique();

                    b.ToTable("DeviceHoursNoCalculation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeviceId = 3,
                            Time = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            DeviceId = 3,
                            Time = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            DeviceId = 3,
                            Time = new TimeSpan(0, 13, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Inverter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("InverterMark")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("InverterTypeId")
                        .HasColumnType("int");

                    b.Property<double>("MaxPower")
                        .HasColumnType("double");

                    b.Property<double>("MaxSalesPowerCapacity")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("SellToNetworkPriceLimit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InverterTypeId");

                    b.ToTable("Inverter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            InverterMark = "HYD 5-20KTL-3PH",
                            InverterTypeId = 1,
                            MaxPower = 20.0,
                            MaxSalesPowerCapacity = 15.0,
                            Name = "SofarMQTTJaamari20kw",
                            SellToNetworkPriceLimit = 0.080000000000000002
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterCompanyHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("InverterId")
                        .HasColumnType("int");

                    b.Property<int>("SpotPriceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SpotPriceId");

                    b.HasIndex("InverterId", "SpotPriceId", "CompanyId", "ActionType")
                        .IsUnique();

                    b.ToTable("InverterCompanyHours");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("InverterId")
                        .HasColumnType("int");

                    b.Property<string>("MqttDeviceId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Payload")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Topic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InverterId");

                    b.ToTable("InverterSensor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = "None",
                            CompanyId = 1,
                            Description = "Jäämari sofar inverter",
                            InverterId = 1,
                            MqttDeviceId = "devId01",
                            Name = "Sofar Virgo",
                            Payload = "",
                            Topic = "SofarMQTTJaamari20kw/response/threephaselimit"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterSwitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ActionWaitTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("InverterSensorId")
                        .HasColumnType("int");

                    b.Property<string>("MqttDeviceId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Payload")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Topic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InverterSensorId");

                    b.ToTable("InverterSwitch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = "ThreePhaseAntiRefluxOn",
                            ActionWaitTimeInSeconds = 10,
                            CompanyId = 1,
                            InverterSensorId = 1,
                            MqttDeviceId = "devId1",
                            Payload = "150",
                            Topic = "SofarMQTTJaamari20kw/set/threephaselimit"
                        },
                        new
                        {
                            Id = 2,
                            ActionType = "ThreePhaseAntiRefluxOff",
                            ActionWaitTimeInSeconds = 10,
                            CompanyId = 1,
                            InverterSensorId = 1,
                            MqttDeviceId = "devId2",
                            Payload = "0",
                            Topic = "SofarMQTTJaamari20kw/set/threephaselimit"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("InverterType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HYD 5-20KTL-3PH"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterTypeCommands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("InverterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("MqttTopic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("InverterTypeId");

                    b.ToTable("InverterTypeCommands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = "ThreePhaseAntiRefluxOn",
                            InverterTypeId = 1,
                            MqttTopic = "/set/threephaselimit"
                        },
                        new
                        {
                            Id = 2,
                            ActionType = "ThreePhaseAntiRefluxOff",
                            InverterTypeId = 1,
                            MqttTopic = "/set/threephaselimit"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(784)
                        .HasColumnType("varchar(784)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Level = "User"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("MqttDeviceId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Payload")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Topic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Sensor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = "Off",
                            CompanyId = 1,
                            Description = "Klemmid 9-10",
                            DeviceId = 2,
                            Name = "Normal ON",
                            Topic = "mqttnet/samples/topic/2"
                        },
                        new
                        {
                            Id = 2,
                            ActionType = "Off",
                            CompanyId = 1,
                            Description = "Klemmid 5-6",
                            DeviceId = 2,
                            Name = "Forced ON",
                            Topic = "mqttnet/samples/topic/3"
                        },
                        new
                        {
                            Id = 3,
                            ActionType = "Off",
                            CompanyId = 1,
                            Description = "Relee Õhk-Vesi 2 seadmes",
                            DeviceId = 2,
                            Name = "Boiler"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Switch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ActionWaitTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("MqttDeviceId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Payload")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SensorGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SensorGroupId");

                    b.HasIndex("SensorId");

                    b.ToTable("Switch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = "Off",
                            ActionWaitTimeInSeconds = 0,
                            CompanyId = 1,
                            SensorGroupId = 1,
                            SensorId = 1,
                            Topic = "mqttnet/samples/topic/4"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.SwitchGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SwitchGroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Name = "Forces ON"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.ThirdParty.SpotHintaFi.SpotPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("PriceNoTax")
                        .HasColumnType("double");

                    b.Property<double>("PriceWithTax")
                        .HasColumnType("double");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("DateTime")
                        .IsUnique();

                    b.ToTable("SpotPrice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 13, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.69999999999999996,
                            PriceWithTax = 0.69999999999999996,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 4, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.2251000000000001,
                            PriceWithTax = 1.2251000000000001,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.92259999999999998,
                            PriceWithTax = 0.92259999999999998,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.94130000000000003,
                            PriceWithTax = 0.94130000000000003,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.22739999999999999,
                            PriceWithTax = 0.22739999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.2099,
                            PriceWithTax = 0.2099,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.14940000000000001,
                            PriceWithTax = 0.14940000000000001,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.1162,
                            PriceWithTax = 0.1162,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.089499999999999996,
                            PriceWithTax = 0.089499999999999996,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.1192,
                            PriceWithTax = 0.1192,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.1426,
                            PriceWithTax = 0.1426,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.1739,
                            PriceWithTax = 0.1739,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.6149,
                            PriceWithTax = 1.6149,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.2406999999999999,
                            PriceWithTax = 1.2406999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.3999999999999999,
                            PriceWithTax = 1.3999999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.75590000000000002,
                            PriceWithTax = 0.75590000000000002,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.49340000000000001,
                            PriceWithTax = 0.49340000000000001,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.49530000000000002,
                            PriceWithTax = 0.49530000000000002,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.49680000000000002,
                            PriceWithTax = 0.49680000000000002,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 4, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.64319999999999999,
                            PriceWithTax = 0.64319999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 31,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.6915,
                            PriceWithTax = 0.6915,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 32,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.1664000000000001,
                            PriceWithTax = 1.1664000000000001,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 33,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.1891,
                            PriceWithTax = 1.1891,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 34,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.1954,
                            PriceWithTax = 1.1954,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 35,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.0331999999999999,
                            PriceWithTax = 1.0331999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 36,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.81089999999999995,
                            PriceWithTax = 0.81089999999999995,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 37,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.67100000000000004,
                            PriceWithTax = 0.67100000000000004,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 38,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.98809999999999998,
                            PriceWithTax = 0.98809999999999998,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 39,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85580000000000001,
                            PriceWithTax = 0.85580000000000001,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 40,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.22270000000000001,
                            PriceWithTax = 0.22270000000000001,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 41,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.1229,
                            PriceWithTax = 0.1229,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 42,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 43,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 44,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 45,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.1465000000000001,
                            PriceWithTax = 1.1465000000000001,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 46,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.6528,
                            PriceWithTax = 1.6528,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 47,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 48,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85699999999999998,
                            PriceWithTax = 0.85699999999999998,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 49,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.50039999999999996,
                            PriceWithTax = 0.50039999999999996,
                            Rank = 5,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PermissionId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "risto.roots@gmail.com",
                            Password = "$2a$12$TW4G6r9o4NgK1X.YQakuauvUKEeeOKWgKSzRvH.JtmBwPtHjC7xMq",
                            PermissionId = 1,
                            Username = "Risto"
                        },
                        new
                        {
                            Id = 2,
                            Email = "virgo.tuul@gmail.com",
                            Password = "$2a$12$ZCj.JC9gyEjorrDypRllcu.822dPZAx/KVrkkAift.oF4EiYhj6YW",
                            PermissionId = 1,
                            Username = "Virgo"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyUsers", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Device", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.DeviceCompanyHours", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.ThirdParty.SpotHintaFi.SpotPrice", "SpotPrice")
                        .WithMany()
                        .HasForeignKey("SpotPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Device");

                    b.Navigation("SpotPrice");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.DeviceHoursNoCalculation", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Inverter", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.InverterType", "InverterType")
                        .WithMany()
                        .HasForeignKey("InverterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("InverterType");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterCompanyHours", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.ThirdParty.SpotHintaFi.SpotPrice", "SpotPrice")
                        .WithMany()
                        .HasForeignKey("SpotPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Inverter");

                    b.Navigation("SpotPrice");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterSensor", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Inverter");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterSwitch", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.InverterSensor", "InverterSensor")
                        .WithMany()
                        .HasForeignKey("InverterSensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("InverterSensor");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterTypeCommands", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.InverterType", "InverterType")
                        .WithMany()
                        .HasForeignKey("InverterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InverterType");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Sensor", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Switch", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.SwitchGroup", "SensorGroup")
                        .WithMany()
                        .HasForeignKey("SensorGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Sensor");

                    b.Navigation("SensorGroup");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.SwitchGroup", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.User", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });
#pragma warning restore 612, 618
        }
    }
}
