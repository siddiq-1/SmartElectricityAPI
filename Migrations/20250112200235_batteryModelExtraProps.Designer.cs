// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartElectricityAPI.Database;

#nullable disable

namespace SmartElectricityAPI.Migrations
{
    [DbContext(typeof(MySQLDBContext))]
    [Migration("20250112200235_batteryModelExtraProps")]
    partial class batteryModelExtraProps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SmartElectricityAPI.Dto.SofarState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("RegisteredInverterId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeHour")
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("batterySOC")
                        .HasColumnType("int");

                    b.Property<double>("battery_current")
                        .HasColumnType("double");

                    b.Property<double>("battery_cycles")
                        .HasColumnType("double");

                    b.Property<double>("battery_power")
                        .HasColumnType("double");

                    b.Property<double>("battery_temp")
                        .HasColumnType("double");

                    b.Property<double>("battery_voltage")
                        .HasColumnType("double");

                    b.Property<int>("consumption")
                        .HasColumnType("int");

                    b.Property<string>("deviceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("grid_power")
                        .HasColumnType("int");

                    b.Property<double>("inverter_HStemp")
                        .HasColumnType("double");

                    b.Property<int>("inverter_power")
                        .HasColumnType("int");

                    b.Property<double>("inverter_temp")
                        .HasColumnType("double");

                    b.Property<int>("running_state")
                        .HasColumnType("int");

                    b.Property<int>("solarPV")
                        .HasColumnType("int");

                    b.Property<int>("solarPV1")
                        .HasColumnType("int");

                    b.Property<double>("solarPV1Current")
                        .HasColumnType("double");

                    b.Property<int>("solarPV2")
                        .HasColumnType("int");

                    b.Property<double>("solarPV2Current")
                        .HasColumnType("double");

                    b.Property<double>("today_charged")
                        .HasColumnType("double");

                    b.Property<double>("today_consumption")
                        .HasColumnType("double");

                    b.Property<double>("today_discharged")
                        .HasColumnType("double");

                    b.Property<double>("today_exported")
                        .HasColumnType("double");

                    b.Property<double>("today_generation")
                        .HasColumnType("double");

                    b.Property<double>("today_purchase")
                        .HasColumnType("double");

                    b.Property<double>("total_charged")
                        .HasColumnType("double");

                    b.Property<double>("total_consumption")
                        .HasColumnType("double");

                    b.Property<double>("total_discharged")
                        .HasColumnType("double");

                    b.Property<double>("total_exported")
                        .HasColumnType("double");

                    b.Property<double>("total_generation")
                        .HasColumnType("double");

                    b.Property<double>("total_purchase")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegisteredInverterId");

                    b.ToTable("SofarState");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.BatteryControlHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionTypeCommand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("AmountCharged")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("GroupNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("HourProfit")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<int>("InverterBatteryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("LineProfit")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<int?>("MaxAvgHourlyConsumption")
                        .HasColumnType("int");

                    b.Property<int?>("MaxAvgHourlyConsumptionOriginal")
                        .HasColumnType("int");

                    b.Property<int?>("MaxAvgHourlyConsumptionOriginalDiff")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxMinPriceDifference")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<TimeSpan?>("MaxPriceHour")
                        .HasColumnType("time(0)");

                    b.Property<decimal?>("MaxPriceWithCost")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<int?>("MinChargingPowerWh")
                        .HasColumnType("int");

                    b.Property<int?>("MinChargingPowerWhOriginal")
                        .HasColumnType("int");

                    b.Property<int?>("MinChargingPowerWhOriginalDiff")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("MinPriceHour")
                        .HasColumnType("time(0)");

                    b.Property<decimal?>("MinPriceWithCost")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("SpotPriceMaxId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int?>("UsableWatts")
                        .HasColumnType("int");

                    b.Property<decimal?>("UsableWattsProfit")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<int?>("WaveNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InverterBatteryId");

                    b.HasIndex("SpotPriceMaxId");

                    b.ToTable("BatteryControlHours");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double>("BrokerPurchaseMargin")
                        .HasColumnType("double");

                    b.Property<double>("BrokerSalesMargin")
                        .HasColumnType("double");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<TimeSpan?>("DayEndTime")
                        .HasColumnType("time(0)");

                    b.Property<TimeSpan?>("DayStartTime")
                        .HasColumnType("time(0)");

                    b.Property<double?>("ExpectedProfitForSelfUseOnlyInCents")
                        .HasColumnType("double");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double>("NetworkServiceFeeDayTime")
                        .HasColumnType("double");

                    b.Property<double>("NetworkServiceFeeNightTime")
                        .HasColumnType("double");

                    b.Property<TimeSpan?>("NightEndTime")
                        .HasColumnType("time(0)");

                    b.Property<TimeSpan?>("NightStartTime")
                        .HasColumnType("time(0)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<bool>("UseFixedPrices")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseNightTimeFeeOnSaturdayAndSunday")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Posti",
                            BrokerPurchaseMargin = 0.0080000000000000002,
                            BrokerSalesMargin = 0.071999999999999995,
                            CountryId = 1,
                            DayEndTime = new TimeSpan(0, 22, 0, 0, 0),
                            DayStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            ExpectedProfitForSelfUseOnlyInCents = 5.0,
                            IsActive = true,
                            Name = "Jäämari",
                            NetworkServiceFeeDayTime = 0.086800000000000002,
                            NetworkServiceFeeNightTime = 0.050500000000000003,
                            NightEndTime = new TimeSpan(0, 7, 0, 0, 0),
                            NightStartTime = new TimeSpan(0, 22, 0, 0, 0),
                            RegionId = 1,
                            UseFixedPrices = false,
                            UseNightTimeFeeOnSaturdayAndSunday = false
                        },
                        new
                        {
                            Id = 2,
                            Address = "Kiriku tee",
                            BrokerPurchaseMargin = 0.0,
                            BrokerSalesMargin = 0.082000000000000003,
                            CountryId = 1,
                            IsActive = true,
                            Name = "TM ERP Solutions OÜ",
                            NetworkServiceFeeDayTime = 0.0,
                            NetworkServiceFeeNightTime = 0.060499999999999998,
                            RegionId = 1,
                            UseFixedPrices = false,
                            UseNightTimeFeeOnSaturdayAndSunday = false
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyFixedPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("double");

                    b.Property<double>("SalesPrice")
                        .HasColumnType("double");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyFixedPrice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 1, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 3, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 4, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 19, 0, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 20, 0, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 21, 0, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 22, 0, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            CompanyId = 1,
                            PurchasePrice = 0.12,
                            SalesPrice = 0.16,
                            Time = new TimeSpan(0, 23, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyFixedPriceTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyFixedPriceId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("double");

                    b.Property<double>("SalesPrice")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyFixedPriceId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyFixedPriceTransactions");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyHourlyFees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("BrokerServiceFee")
                        .HasColumnType("double");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("NetworkServiceFee")
                        .HasColumnType("double");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyHourlyFees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.050500000000000003,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.050500000000000003,
                            Time = new TimeSpan(0, 1, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.050500000000000003,
                            Time = new TimeSpan(0, 2, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.050500000000000003,
                            Time = new TimeSpan(0, 3, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.050500000000000003,
                            Time = new TimeSpan(0, 4, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.050500000000000003,
                            Time = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.050500000000000003,
                            Time = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 19, 0, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 20, 0, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.086800000000000002,
                            Time = new TimeSpan(0, 21, 0, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.050500000000000003,
                            Time = new TimeSpan(0, 22, 0, 0, 0)
                        },
                        new
                        {
                            Id = 25,
                            BrokerServiceFee = 0.071999999999999995,
                            CompanyId = 1,
                            NetworkServiceFee = 0.050500000000000003,
                            Time = new TimeSpan(0, 23, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyHourlyFeesTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("BrokerServiceFree")
                        .HasColumnType("double");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double>("NetworkServiceFree")
                        .HasColumnType("double");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "Date", "Time")
                        .IsUnique();

                    b.ToTable("CompanyHourlyFeesTransactions");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            PermissionId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            PermissionId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 2,
                            PermissionId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 2,
                            PermissionId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Netherlands"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CountrySolarCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<double>("SolarCapacity")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountrySolarCapacity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Month = 1,
                            SolarCapacity = 0.40000000000000002
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Month = 2,
                            SolarCapacity = 0.5
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Month = 3,
                            SolarCapacity = 0.59999999999999998
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Month = 4,
                            SolarCapacity = 0.75
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Month = 5,
                            SolarCapacity = 1.0
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Month = 6,
                            SolarCapacity = 1.0
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Month = 7,
                            SolarCapacity = 1.0
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Month = 8,
                            SolarCapacity = 1.0
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Month = 9,
                            SolarCapacity = 0.75
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Month = 10,
                            SolarCapacity = 0.59999999999999998
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            Month = 11,
                            SolarCapacity = 0.5
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            Month = 12,
                            SolarCapacity = 0.40000000000000002
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("FirstHourPercentageKwPriceRequirementBeforeHeating")
                        .HasColumnType("double");

                    b.Property<bool>("ForcedOff")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ForcedOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("ForcedOnPercentageForComingHourToEnable")
                        .HasColumnType("double");

                    b.Property<bool>("FuseboxForcedOff")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FuseboxForcedOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("MaxForcedOnHoursIn24h")
                        .HasColumnType("double");

                    b.Property<double>("MaxStopHoursConsecutive")
                        .HasColumnType("double");

                    b.Property<double>("MaxStopHoursIn24h")
                        .HasColumnType("double");

                    b.Property<bool>("MediumOn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("TemperatureInForcedOnMode")
                        .HasColumnType("double");

                    b.Property<double?>("TemperatureInStandardMode")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Device");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            FirstHourPercentageKwPriceRequirementBeforeHeating = 10.0,
                            ForcedOff = true,
                            ForcedOn = true,
                            ForcedOnPercentageForComingHourToEnable = 50.0,
                            FuseboxForcedOff = true,
                            FuseboxForcedOn = true,
                            MaxForcedOnHoursIn24h = 10.0,
                            MaxStopHoursConsecutive = 8.0,
                            MaxStopHoursIn24h = 8.0,
                            MediumOn = false,
                            Name = "Õhk-Vesi Põrand"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 1,
                            FirstHourPercentageKwPriceRequirementBeforeHeating = 20.0,
                            ForcedOff = true,
                            ForcedOn = true,
                            ForcedOnPercentageForComingHourToEnable = 50.0,
                            FuseboxForcedOff = true,
                            FuseboxForcedOn = true,
                            MaxForcedOnHoursIn24h = 10.0,
                            MaxStopHoursConsecutive = 2.0,
                            MaxStopHoursIn24h = 6.0,
                            MediumOn = false,
                            Name = "Õhk-Vesi Boiler"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 1,
                            FirstHourPercentageKwPriceRequirementBeforeHeating = 43.0,
                            ForcedOff = true,
                            ForcedOn = true,
                            ForcedOnPercentageForComingHourToEnable = 100.0,
                            FuseboxForcedOff = true,
                            FuseboxForcedOn = true,
                            MaxForcedOnHoursIn24h = 10.0,
                            MaxStopHoursConsecutive = 3.0,
                            MaxStopHoursIn24h = 6.0,
                            MediumOn = false,
                            Name = "Tava boiler",
                            TemperatureInForcedOnMode = 65.0,
                            TemperatureInStandardMode = 55.0
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 1,
                            FirstHourPercentageKwPriceRequirementBeforeHeating = 30.0,
                            ForcedOff = false,
                            ForcedOn = true,
                            ForcedOnPercentageForComingHourToEnable = 200.0,
                            FuseboxForcedOff = false,
                            FuseboxForcedOn = true,
                            MaxForcedOnHoursIn24h = 2.0,
                            MaxStopHoursConsecutive = 0.0,
                            MaxStopHoursIn24h = 0.0,
                            MediumOn = false,
                            Name = "Külmik"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.DeviceCompanyHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<int>("SpotPriceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SpotPriceId");

                    b.HasIndex("DeviceId", "SpotPriceId", "CompanyId", "ActionType")
                        .IsUnique();

                    b.ToTable("DeviceCompanyHours");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.DeviceHoursNoCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId", "Time")
                        .IsUnique();

                    b.ToTable("DeviceHoursNoCalculation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeviceId = 3,
                            Time = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            DeviceId = 3,
                            Time = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            DeviceId = 3,
                            Time = new TimeSpan(0, 13, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Fusebox.FuseBoxMessageHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("device_id")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("m_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("m_orig_id")
                        .HasColumnType("bigint");

                    b.Property<string>("m_type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FuseBoxMessageHeader");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Fusebox.FuseBoxMsgLogger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("FuseBoxMsgLogger");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Fusebox.FuseBoxPowSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BipolarControl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("FuseBoxMessageHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("PowerValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("FuseBoxMessageHeaderId");

                    b.ToTable("FuseBoxPowSet");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Fusebox.FuseBoxRealTimeMsg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("FuseBoxMessageHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("FuseBoxPowSetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("exp")
                        .HasColumnType("int");

                    b.Property<long>("ts")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FuseBoxMessageHeaderId");

                    b.HasIndex("FuseBoxPowSetId");

                    b.ToTable("FuseBoxRealTimeMsg");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Fusebox.FuseBoxSchedRegMsg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("FuseBoxMessageHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("FuseBoxPowSetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<long?>("actualEnd")
                        .HasColumnType("bigint");

                    b.Property<long?>("actualStart")
                        .HasColumnType("bigint");

                    b.Property<bool>("cancel")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("end")
                        .HasColumnType("bigint");

                    b.Property<long?>("start")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FuseBoxMessageHeaderId");

                    b.HasIndex("FuseBoxPowSetId");

                    b.ToTable("FuseBoxSchedRegMsg");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Inverter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowPurchasingFromGridInSummer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CalculationFormula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("FixedAvgHourlyWatts")
                        .HasColumnType("int");

                    b.Property<int>("InverterTypeId")
                        .HasColumnType("int");

                    b.Property<double>("MaxPower")
                        .HasColumnType("double");

                    b.Property<double>("MaxSalesPowerCapacity")
                        .HasColumnType("double");

                    b.Property<bool>("PVInverterIsSeparated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("RegisteredInverterId")
                        .HasColumnType("int");

                    b.Property<string>("SolarPanelsDirecation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("SolarPanelsMaxPower")
                        .HasColumnType("double");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<bool>("UseFixedAvgHourlyWatts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseInverterSelfUse")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseOnlyCompensateMissingEnergy")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseWeatherForecast")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InverterTypeId");

                    b.HasIndex("RegisteredInverterId");

                    b.ToTable("Inverter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowPurchasingFromGridInSummer = false,
                            CalculationFormula = "Winter",
                            CompanyId = 1,
                            FixedAvgHourlyWatts = 0,
                            InverterTypeId = 1,
                            MaxPower = 20.0,
                            MaxSalesPowerCapacity = 15.0,
                            PVInverterIsSeparated = false,
                            RegisteredInverterId = 1,
                            SolarPanelsDirecation = "S",
                            SolarPanelsMaxPower = 0.0,
                            UseFixedAvgHourlyWatts = false,
                            UseInverterSelfUse = false,
                            UseOnlyCompensateMissingEnergy = false,
                            UseWeatherForecast = false
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterBattery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AdditionalTimeForBatteryChargingPercentage")
                        .HasColumnType("double");

                    b.Property<bool>("AllowPurchasingFromGridInSummer")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BatteryMinLevelWithConsumeMax")
                        .HasColumnType("int");

                    b.Property<int>("BatteryVoltsMax")
                        .HasColumnType("int");

                    b.Property<int>("BatteryVoltsMin")
                        .HasColumnType("int");

                    b.Property<bool>("CalculateBatterSocFromVolts")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("CapacityKWh")
                        .HasColumnType("double");

                    b.Property<double>("ChargingPowerFromGridKWh")
                        .HasColumnType("double");

                    b.Property<double>("ChargingPowerFromSolarKWh")
                        .HasColumnType("double");

                    b.Property<bool>("ClientUseHzMarket")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ConsiderBadWeather75PercentFactor")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("DischargingPowerToGridKWh")
                        .HasColumnType("double");

                    b.Property<double>("HzMarketDischargeMinPrice")
                        .HasColumnType("double");

                    b.Property<int>("HzMarketMinBatteryLevelOnDischargeCommand")
                        .HasColumnType("int");

                    b.Property<int>("InverterId")
                        .HasColumnType("int");

                    b.Property<bool>("LoadBatteryTo95PercentEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LoadBatteryTo95PercentPrice")
                        .HasColumnType("int");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("int");

                    b.Property<int>("MinLevel")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBatteries")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<bool>("UseHzMarket")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("InverterId");

                    b.ToTable("InverterBattery");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalTimeForBatteryChargingPercentage = 0.0,
                            AllowPurchasingFromGridInSummer = false,
                            BatteryMinLevelWithConsumeMax = 0,
                            BatteryVoltsMax = 0,
                            BatteryVoltsMin = 0,
                            CalculateBatterSocFromVolts = false,
                            CapacityKWh = 10.0,
                            ChargingPowerFromGridKWh = 6.5,
                            ChargingPowerFromSolarKWh = 0.0,
                            ClientUseHzMarket = false,
                            ConsiderBadWeather75PercentFactor = false,
                            DischargingPowerToGridKWh = 0.0,
                            HzMarketDischargeMinPrice = 0.0,
                            HzMarketMinBatteryLevelOnDischargeCommand = 0,
                            InverterId = 1,
                            LoadBatteryTo95PercentEnabled = true,
                            LoadBatteryTo95PercentPrice = 1,
                            MaxLevel = 80,
                            MinLevel = 20,
                            NumberOfBatteries = 0,
                            UseHzMarket = false
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterCompanyCommandsPayload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("InverterId")
                        .HasColumnType("int");

                    b.Property<int>("InverterTypeCommandsId")
                        .HasColumnType("int");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("InverterId");

                    b.HasIndex("InverterTypeCommandsId");

                    b.ToTable("InverterCompanyCommandsPayload");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InverterId = 1,
                            InverterTypeCommandsId = 1,
                            Payload = "150"
                        },
                        new
                        {
                            Id = 2,
                            InverterId = 1,
                            InverterTypeCommandsId = 2,
                            Payload = "0"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterCompanyHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CostWithPurchaseMargin")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<decimal?>("CostWithSalesMargin")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("InverterId")
                        .HasColumnType("int");

                    b.Property<int>("SpotPriceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SpotPriceId");

                    b.HasIndex("InverterId", "SpotPriceId", "CompanyId", "ActionType")
                        .IsUnique();

                    b.ToTable("InverterCompanyHours");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterHoursAvgConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvgHourlyConsumption")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateOnly>("DateCalculated")
                        .HasColumnType("date");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("InverterId")
                        .HasColumnType("int");

                    b.Property<int>("RegisteredInverterId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeHour")
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegisteredInverterId");

                    b.HasIndex("InverterId", "RegisteredInverterId", "DateCalculated", "DayOfWeek", "TimeHour")
                        .IsUnique();

                    b.ToTable("InverterHoursAvgConsumption");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterPublishedMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int>("RegisteredInverterId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredInverterId");

                    b.ToTable("InverterPublishedMessages");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("LossInWatts")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("InverterType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LossInWatts = 300.0,
                            Name = "HYD 5-20KTL-3PH"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterTypeActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ActionTypeCommand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ButtonBorderColor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("InverterTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsClickable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderSequence")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("InverterTypeId");

                    b.ToTable("InverterTypeActions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionName = "Charge Max",
                            ActionType = "Charge",
                            ActionTypeCommand = "ChargeMax",
                            ButtonBorderColor = "",
                            InverterTypeId = 1,
                            IsClickable = true,
                            OrderSequence = 0
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "Charge with Remaining sun",
                            ActionType = "Charge",
                            ActionTypeCommand = "ChargeWithRemainingSun",
                            ButtonBorderColor = "",
                            InverterTypeId = 1,
                            IsClickable = true,
                            OrderSequence = 0
                        },
                        new
                        {
                            Id = 4,
                            ActionName = "Self use",
                            ActionType = "Discharge",
                            ActionTypeCommand = "SelfUse",
                            ButtonBorderColor = "",
                            InverterTypeId = 1,
                            IsClickable = true,
                            OrderSequence = 0
                        },
                        new
                        {
                            Id = 5,
                            ActionName = "Consume battery with max power",
                            ActionType = "Discharge",
                            ActionTypeCommand = "ConsumeBatteryWithMaxPower",
                            ButtonBorderColor = "",
                            InverterTypeId = 1,
                            IsClickable = true,
                            OrderSequence = 0
                        },
                        new
                        {
                            Id = 6,
                            ActionName = "Automatic control",
                            ActionType = "Automode",
                            ActionTypeCommand = "AutoMode",
                            ButtonBorderColor = "",
                            InverterTypeId = 1,
                            IsClickable = true,
                            OrderSequence = 0
                        },
                        new
                        {
                            Id = 7,
                            ActionName = "Sell remaining sun (no charging)",
                            ActionType = "Charge",
                            ActionTypeCommand = "SellRemainingSunNoCharging",
                            ButtonBorderColor = "",
                            InverterTypeId = 1,
                            IsClickable = true,
                            OrderSequence = 0
                        },
                        new
                        {
                            Id = 8,
                            ActionName = "Inverter Self use",
                            ActionType = "ModeControl",
                            ActionTypeCommand = "InverterSelfUse",
                            ButtonBorderColor = "",
                            InverterTypeId = 1,
                            IsClickable = true,
                            OrderSequence = 0
                        },
                        new
                        {
                            Id = 9,
                            ActionName = "Hz market control",
                            ActionType = "ExternalControlHzMarket",
                            ActionTypeCommand = "HzMarket",
                            ButtonBorderColor = "",
                            InverterTypeId = 1,
                            IsClickable = false,
                            OrderSequence = 0
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterTypeCommands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("InverterTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPayloadFixed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MqttTopic")
                        .IsRequired()
                        .HasMaxLength(384)
                        .HasColumnType("varchar(384)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("InverterTypeId");

                    b.ToTable("InverterTypeCommands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = "ThreePhaseAntiRefluxOn",
                            InverterTypeId = 1,
                            IsPayloadFixed = true,
                            MqttTopic = "/set/threephaselimit"
                        },
                        new
                        {
                            Id = 2,
                            ActionType = "ThreePhaseAntiRefluxOff",
                            InverterTypeId = 1,
                            IsPayloadFixed = true,
                            MqttTopic = "/set/threephaselimit"
                        },
                        new
                        {
                            Id = 3,
                            ActionType = "Charge",
                            InverterTypeId = 1,
                            IsPayloadFixed = false,
                            MqttTopic = "/set/charge"
                        },
                        new
                        {
                            Id = 4,
                            ActionType = "Discharge",
                            InverterTypeId = 1,
                            IsPayloadFixed = false,
                            MqttTopic = "/set/discharge"
                        },
                        new
                        {
                            Id = 5,
                            ActionType = "ModeControl",
                            InverterTypeId = 1,
                            IsPayloadFixed = false,
                            MqttTopic = "/set/mode_control"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterTypeCompanyActions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ActionState")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ActionTypeCommand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("InverterId")
                        .HasColumnType("int");

                    b.Property<int>("InverterTypeActionsId")
                        .HasColumnType("int");

                    b.Property<int>("InverterTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InverterId");

                    b.HasIndex("InverterTypeActionsId");

                    b.HasIndex("InverterTypeId");

                    b.ToTable("InverterTypeCompanyActions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionName = "Charge Max",
                            ActionState = false,
                            ActionType = "Charge",
                            ActionTypeCommand = "ChargeMax",
                            CompanyId = 1,
                            InverterId = 1,
                            InverterTypeActionsId = 1,
                            InverterTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActionName = "Charge with Remaining sun",
                            ActionState = false,
                            ActionType = "Charge",
                            ActionTypeCommand = "ChargeWithRemainingSun",
                            CompanyId = 1,
                            InverterId = 1,
                            InverterTypeActionsId = 2,
                            InverterTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            ActionName = "Self use",
                            ActionState = false,
                            ActionType = "Discharge",
                            ActionTypeCommand = "SelfUse",
                            CompanyId = 1,
                            InverterId = 1,
                            InverterTypeActionsId = 4,
                            InverterTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            ActionName = "Consume battery with max power",
                            ActionState = false,
                            ActionType = "Discharge",
                            ActionTypeCommand = "ConsumeBatteryWithMaxPower",
                            CompanyId = 1,
                            InverterId = 1,
                            InverterTypeActionsId = 5,
                            InverterTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            ActionName = "Automatic control",
                            ActionState = false,
                            ActionType = "Automode",
                            ActionTypeCommand = "AutoMode",
                            CompanyId = 1,
                            InverterId = 1,
                            InverterTypeActionsId = 6,
                            InverterTypeId = 1
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterTypeListenTopics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("InverterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("InverterTypeId");

                    b.ToTable("InverterTypeListenTopics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InverterTypeId = 1,
                            TopicName = "/state"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2352)
                        .HasColumnType("varchar(2352)");

                    b.Property<string>("Origin")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.MqttMessageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionTypeCommand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("CommandDispatched")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExtraInfo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("InverterId")
                        .HasColumnType("int");

                    b.Property<string>("MQttMessageType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MqttMessageOrigin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("InverterId");

                    b.ToTable("MqttMessageLog");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.MqttUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsClientIdRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MqttUsers");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Level = "User"
                        },
                        new
                        {
                            Id = 3,
                            Level = "Moderator"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("OffsetHoursFromEstonianTime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId", "Abbreviation")
                        .IsUnique();

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "EE",
                            CountryId = 1,
                            OffsetHoursFromEstonianTime = 0
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "SE1",
                            CountryId = 2,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "SE2",
                            CountryId = 2,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "SE3",
                            CountryId = 2,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "SE4",
                            CountryId = 2,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "FI",
                            CountryId = 3,
                            OffsetHoursFromEstonianTime = 0
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "NO1",
                            CountryId = 4,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "NO2",
                            CountryId = 4,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "NO3",
                            CountryId = 4,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "NO4",
                            CountryId = 4,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "NO5",
                            CountryId = 4,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "DK1",
                            CountryId = 5,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 13,
                            Abbreviation = "DK2",
                            CountryId = 5,
                            OffsetHoursFromEstonianTime = 1
                        },
                        new
                        {
                            Id = 14,
                            Abbreviation = "LV",
                            CountryId = 6,
                            OffsetHoursFromEstonianTime = 0
                        },
                        new
                        {
                            Id = 15,
                            Abbreviation = "LT",
                            CountryId = 7,
                            OffsetHoursFromEstonianTime = 0
                        },
                        new
                        {
                            Id = 16,
                            Abbreviation = "NL",
                            CountryId = 8,
                            OffsetHoursFromEstonianTime = 1
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.RegisteredInverter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RegisteredInverter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SofarMQTTJaamari20kw"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("BroadcastToFusebox")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("MqttDeviceId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Payload")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Topic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Sensor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = "Off",
                            BroadcastToFusebox = false,
                            CompanyId = 1,
                            Description = "Klemmid 9-10",
                            DeviceId = 2,
                            Name = "Normal ON",
                            Topic = "mqttnet/samples/topic/2"
                        },
                        new
                        {
                            Id = 2,
                            ActionType = "Off",
                            BroadcastToFusebox = false,
                            CompanyId = 1,
                            Description = "Klemmid 5-6",
                            DeviceId = 2,
                            Name = "Forced ON",
                            Topic = "mqttnet/samples/topic/3"
                        },
                        new
                        {
                            Id = 3,
                            ActionType = "Off",
                            BroadcastToFusebox = false,
                            CompanyId = 1,
                            Description = "Relee Õhk-Vesi 2 seadmes",
                            DeviceId = 2,
                            Name = "Boiler"
                        },
                        new
                        {
                            Id = 4,
                            ActionType = "None",
                            BroadcastToFusebox = true,
                            CompanyId = 1,
                            Description = "Õhk-Vesi Põrand voolutarve",
                            DeviceId = 1,
                            Name = "Voolutarve",
                            Topic = "shellies/shellyem3-485519DC6688/emeter/0/energy"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.SofarStateBuffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("MqttMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("SofarStateBuffer");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.SofarStateHourly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int>("NoOfGroupedTransactions")
                        .HasColumnType("int");

                    b.Property<int?>("RegisteredInverterId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeHour")
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("batterySOC")
                        .HasColumnType("int");

                    b.Property<double>("battery_current")
                        .HasColumnType("double");

                    b.Property<double>("battery_power")
                        .HasColumnType("double");

                    b.Property<double>("battery_tempMax")
                        .HasColumnType("double");

                    b.Property<double>("battery_tempMin")
                        .HasColumnType("double");

                    b.Property<double>("battery_voltage")
                        .HasColumnType("double");

                    b.Property<int>("consumption")
                        .HasColumnType("int");

                    b.Property<string>("deviceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("grid_power")
                        .HasColumnType("int");

                    b.Property<double>("hour_charged")
                        .HasColumnType("double");

                    b.Property<double>("hour_consumption")
                        .HasColumnType("double");

                    b.Property<double>("hour_discharged")
                        .HasColumnType("double");

                    b.Property<double>("hour_exported")
                        .HasColumnType("double");

                    b.Property<double>("hour_generation")
                        .HasColumnType("double");

                    b.Property<double>("hour_purchase")
                        .HasColumnType("double");

                    b.Property<int>("inverter_power")
                        .HasColumnType("int");

                    b.Property<double>("inverter_tempMax")
                        .HasColumnType("double");

                    b.Property<double>("inverter_tempMin")
                        .HasColumnType("double");

                    b.Property<int>("solarPV")
                        .HasColumnType("int");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("today_charged")
                        .HasColumnType("double");

                    b.Property<double>("today_consumption")
                        .HasColumnType("double");

                    b.Property<double>("today_discharged")
                        .HasColumnType("double");

                    b.Property<double>("today_exported")
                        .HasColumnType("double");

                    b.Property<double>("today_generation")
                        .HasColumnType("double");

                    b.Property<double>("today_purchase")
                        .HasColumnType("double");

                    b.Property<double>("total_charged")
                        .HasColumnType("double");

                    b.Property<double>("total_consumption")
                        .HasColumnType("double");

                    b.Property<double>("total_discharged")
                        .HasColumnType("double");

                    b.Property<double>("total_exported")
                        .HasColumnType("double");

                    b.Property<double>("total_generation")
                        .HasColumnType("double");

                    b.Property<double>("total_purchase")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegisteredInverterId");

                    b.ToTable("SofarStateHourly");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.SofarStateHourlyTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int>("NoOfGroupedTransactions")
                        .HasColumnType("int");

                    b.Property<int?>("RegisteredInverterId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeHour")
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("batterySOC")
                        .HasColumnType("int");

                    b.Property<double>("battery_current")
                        .HasColumnType("double");

                    b.Property<double>("battery_power")
                        .HasColumnType("double");

                    b.Property<double>("battery_tempMax")
                        .HasColumnType("double");

                    b.Property<double>("battery_tempMin")
                        .HasColumnType("double");

                    b.Property<double>("battery_voltage")
                        .HasColumnType("double");

                    b.Property<int>("consumption")
                        .HasColumnType("int");

                    b.Property<string>("deviceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("grid_power")
                        .HasColumnType("int");

                    b.Property<double>("hour_charged")
                        .HasColumnType("double");

                    b.Property<double>("hour_consumption")
                        .HasColumnType("double");

                    b.Property<double>("hour_discharged")
                        .HasColumnType("double");

                    b.Property<double>("hour_exported")
                        .HasColumnType("double");

                    b.Property<double>("hour_generation")
                        .HasColumnType("double");

                    b.Property<double>("hour_purchase")
                        .HasColumnType("double");

                    b.Property<int>("inverter_power")
                        .HasColumnType("int");

                    b.Property<double>("inverter_tempMax")
                        .HasColumnType("double");

                    b.Property<double>("inverter_tempMin")
                        .HasColumnType("double");

                    b.Property<int>("solarPV")
                        .HasColumnType("int");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("today_charged")
                        .HasColumnType("double");

                    b.Property<double>("today_consumption")
                        .HasColumnType("double");

                    b.Property<double>("today_discharged")
                        .HasColumnType("double");

                    b.Property<double>("today_exported")
                        .HasColumnType("double");

                    b.Property<double>("today_generation")
                        .HasColumnType("double");

                    b.Property<double>("today_purchase")
                        .HasColumnType("double");

                    b.Property<double>("total_charged")
                        .HasColumnType("double");

                    b.Property<double>("total_consumption")
                        .HasColumnType("double");

                    b.Property<double>("total_discharged")
                        .HasColumnType("double");

                    b.Property<double>("total_exported")
                        .HasColumnType("double");

                    b.Property<double>("total_generation")
                        .HasColumnType("double");

                    b.Property<double>("total_purchase")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RegisteredInverterId");

                    b.ToTable("SofarStateHourlyTemp");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.SolarPanelCapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("MaxPercentage")
                        .HasColumnType("double");

                    b.Property<int>("PanelTilt")
                        .HasColumnType("int");

                    b.Property<string>("SolarPanelsDirecation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.ToTable("SolarPanelCapacity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxPercentage = 0.050000000000000003,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            MaxPercentage = 0.10000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            MaxPercentage = 0.29999999999999999,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            MaxPercentage = 0.55000000000000004,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            MaxPercentage = 0.80000000000000004,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            MaxPercentage = 1.0,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            MaxPercentage = 1.1000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            MaxPercentage = 1.1000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            MaxPercentage = 1.0,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            MaxPercentage = 0.80000000000000004,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            MaxPercentage = 0.55000000000000004,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            MaxPercentage = 0.29999999999999999,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            MaxPercentage = 0.10000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 19, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            MaxPercentage = 0.050000000000000003,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "S",
                            Time = new TimeSpan(0, 20, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            MaxPercentage = 0.10000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            MaxPercentage = 0.20000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            MaxPercentage = 0.5,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            MaxPercentage = 0.69999999999999996,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            MaxPercentage = 1.0,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            MaxPercentage = 1.1000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            MaxPercentage = 1.1000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            MaxPercentage = 1.0,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            MaxPercentage = 0.84999999999999998,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            MaxPercentage = 0.69999999999999996,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 25,
                            MaxPercentage = 0.5,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 26,
                            MaxPercentage = 0.29999999999999999,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 27,
                            MaxPercentage = 0.10000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 19, 0, 0, 0)
                        },
                        new
                        {
                            Id = 28,
                            MaxPercentage = 0.050000000000000003,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SE",
                            Time = new TimeSpan(0, 20, 0, 0, 0)
                        },
                        new
                        {
                            Id = 29,
                            MaxPercentage = 0.050000000000000003,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 30,
                            MaxPercentage = 0.10000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 31,
                            MaxPercentage = 0.29999999999999999,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 32,
                            MaxPercentage = 0.5,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 33,
                            MaxPercentage = 0.69999999999999996,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 34,
                            MaxPercentage = 0.84999999999999998,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            Id = 35,
                            MaxPercentage = 1.0,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 36,
                            MaxPercentage = 1.1000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = 37,
                            MaxPercentage = 1.1000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 38,
                            MaxPercentage = 1.0,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = 39,
                            MaxPercentage = 0.69999999999999996,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 40,
                            MaxPercentage = 0.5,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = 41,
                            MaxPercentage = 0.20000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 19, 0, 0, 0)
                        },
                        new
                        {
                            Id = 42,
                            MaxPercentage = 0.10000000000000001,
                            PanelTilt = 45,
                            SolarPanelsDirecation = "SW",
                            Time = new TimeSpan(0, 20, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Switch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ActionWaitTimeInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("MqttDeviceId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Payload")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SensorGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SensorGroupId");

                    b.HasIndex("SensorId");

                    b.ToTable("Switch");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = "Off",
                            ActionWaitTimeInSeconds = 0,
                            CompanyId = 1,
                            SensorGroupId = 1,
                            SensorId = 1,
                            Topic = "mqttnet/samples/topic/4"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.SwitchGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SwitchGroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Name = "Forces ON"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.ThirdParty.SpotHintaFi.SpotPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("PriceNoTax")
                        .HasColumnType("double");

                    b.Property<double>("PriceWithTax")
                        .HasColumnType("double");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DateTime")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.HasIndex("DateTime", "RegionId")
                        .IsUnique();

                    b.ToTable("SpotPrice");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 13, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.69999999999999996,
                            PriceWithTax = 0.69999999999999996,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 13, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 13, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 13, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.2251000000000001,
                            PriceWithTax = 1.2251000000000001,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 4, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.92259999999999998,
                            PriceWithTax = 0.92259999999999998,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.94130000000000003,
                            PriceWithTax = 0.94130000000000003,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.22739999999999999,
                            PriceWithTax = 0.22739999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.2099,
                            PriceWithTax = 0.2099,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.14940000000000001,
                            PriceWithTax = 0.14940000000000001,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.1162,
                            PriceWithTax = 0.1162,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.089499999999999996,
                            PriceWithTax = 0.089499999999999996,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.1192,
                            PriceWithTax = 0.1192,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.1426,
                            PriceWithTax = 0.1426,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.1739,
                            PriceWithTax = 0.1739,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.6149,
                            PriceWithTax = 1.6149,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.2406999999999999,
                            PriceWithTax = 1.2406999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.3999999999999999,
                            PriceWithTax = 1.3999999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.75590000000000002,
                            PriceWithTax = 0.75590000000000002,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.49340000000000001,
                            PriceWithTax = 0.49340000000000001,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 14, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.49530000000000002,
                            PriceWithTax = 0.49530000000000002,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.49680000000000002,
                            PriceWithTax = 0.49680000000000002,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.64319999999999999,
                            PriceWithTax = 0.64319999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 31,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.6915,
                            PriceWithTax = 0.6915,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 32,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.1664000000000001,
                            PriceWithTax = 1.1664000000000001,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 33,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 4, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.1891,
                            PriceWithTax = 1.1891,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 34,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.1954,
                            PriceWithTax = 1.1954,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 35,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.0331999999999999,
                            PriceWithTax = 1.0331999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 36,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.81089999999999995,
                            PriceWithTax = 0.81089999999999995,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 37,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.67100000000000004,
                            PriceWithTax = 0.67100000000000004,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 38,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.98809999999999998,
                            PriceWithTax = 0.98809999999999998,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 39,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85580000000000001,
                            PriceWithTax = 0.85580000000000001,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 40,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.22270000000000001,
                            PriceWithTax = 0.22270000000000001,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 41,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.1229,
                            PriceWithTax = 0.1229,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 42,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 43,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 44,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85589999999999999,
                            PriceWithTax = 0.85589999999999999,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 45,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.1465000000000001,
                            PriceWithTax = 1.1465000000000001,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 46,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 1.6528,
                            PriceWithTax = 1.6528,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 47,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85599999999999998,
                            PriceWithTax = 0.85599999999999998,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 48,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.85699999999999998,
                            PriceWithTax = 0.85699999999999998,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        },
                        new
                        {
                            Id = 49,
                            Date = new DateOnly(1, 1, 1),
                            DateTime = new DateTime(2023, 5, 15, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceNoTax = 0.50039999999999996,
                            PriceWithTax = 0.50039999999999996,
                            Rank = 5,
                            RegionId = 1,
                            Time = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<int?>("SelectedCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SelectedCompanyId")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "risto.roots@gmail.com",
                            IsAdmin = true,
                            Password = "$2a$12$P.UjQjBRvyWpLFQmdrvNa.UHkbA8s2fw6mMD27NIrMivaQ9BKNrOm",
                            SelectedCompanyId = 1,
                            Username = "Risto"
                        },
                        new
                        {
                            Id = 2,
                            Email = "virgo.tuul@gmail.com",
                            IsAdmin = true,
                            Password = "$2a$12$ZCj.JC9gyEjorrDypRllcu.822dPZAx/KVrkkAift.oF4EiYhj6YW",
                            SelectedCompanyId = 1,
                            Username = "Virgo"
                        });
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.WeatherForecastData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChanceOfSnow")
                        .HasColumnType("int");

                    b.Property<int>("Cloud")
                        .HasColumnType("int");

                    b.Property<string>("ConditionTxt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(0)");

                    b.Property<int>("EstimatedSolarPower")
                        .HasColumnType("int");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<int>("InverterId")
                        .HasColumnType("int");

                    b.Property<double>("PrecipMM")
                        .HasColumnType("double");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time(0)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(0)");

                    b.Property<double>("Uv")
                        .HasColumnType("double");

                    b.Property<int>("WeatherPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InverterId");

                    b.ToTable("WeatherForecastData");
                });

            modelBuilder.Entity("SmartElectricityAPI.Dto.SofarState", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("SmartElectricityAPI.Models.RegisteredInverter", "RegisteredInverter")
                        .WithMany()
                        .HasForeignKey("RegisteredInverterId");

                    b.Navigation("Company");

                    b.Navigation("RegisteredInverter");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.BatteryControlHours", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.InverterBattery", "InverterBattery")
                        .WithMany()
                        .HasForeignKey("InverterBatteryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.ThirdParty.SpotHintaFi.SpotPrice", "SpotPriceMax")
                        .WithMany()
                        .HasForeignKey("SpotPriceMaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InverterBattery");

                    b.Navigation("SpotPriceMax");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Company", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyFixedPrice", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyFixedPriceTransactions", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.CompanyFixedPrice", "CompanyFixedPrice")
                        .WithMany()
                        .HasForeignKey("CompanyFixedPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyFixedPrice");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyHourlyFees", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyHourlyFeesTransactions", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CompanyUsers", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("SmartElectricityAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.CountrySolarCapacity", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Device", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.DeviceCompanyHours", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.ThirdParty.SpotHintaFi.SpotPrice", "SpotPrice")
                        .WithMany()
                        .HasForeignKey("SpotPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Device");

                    b.Navigation("SpotPrice");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.DeviceHoursNoCalculation", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Fusebox.FuseBoxPowSet", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Fusebox.FuseBoxMessageHeader", "FuseBoxMessageHeader")
                        .WithMany()
                        .HasForeignKey("FuseBoxMessageHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuseBoxMessageHeader");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Fusebox.FuseBoxRealTimeMsg", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Fusebox.FuseBoxMessageHeader", "FuseBoxMessageHeader")
                        .WithMany()
                        .HasForeignKey("FuseBoxMessageHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Fusebox.FuseBoxPowSet", "FuseBoxPowSet")
                        .WithMany()
                        .HasForeignKey("FuseBoxPowSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuseBoxMessageHeader");

                    b.Navigation("FuseBoxPowSet");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Fusebox.FuseBoxSchedRegMsg", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Fusebox.FuseBoxMessageHeader", "FuseBoxMessageHeader")
                        .WithMany()
                        .HasForeignKey("FuseBoxMessageHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Fusebox.FuseBoxPowSet", "FuseBoxPowSet")
                        .WithMany()
                        .HasForeignKey("FuseBoxPowSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuseBoxMessageHeader");

                    b.Navigation("FuseBoxPowSet");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Inverter", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.InverterType", "InverterType")
                        .WithMany()
                        .HasForeignKey("InverterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.RegisteredInverter", "RegisteredInverter")
                        .WithMany()
                        .HasForeignKey("RegisteredInverterId");

                    b.Navigation("Company");

                    b.Navigation("InverterType");

                    b.Navigation("RegisteredInverter");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterBattery", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Inverter", "Inverter")
                        .WithMany("InverterBattery")
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inverter");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterCompanyCommandsPayload", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.InverterTypeCommands", "InverterTypeCommands")
                        .WithMany()
                        .HasForeignKey("InverterTypeCommandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inverter");

                    b.Navigation("InverterTypeCommands");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterCompanyHours", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.ThirdParty.SpotHintaFi.SpotPrice", "SpotPrice")
                        .WithMany()
                        .HasForeignKey("SpotPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Inverter");

                    b.Navigation("SpotPrice");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterHoursAvgConsumption", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.RegisteredInverter", "RegisteredInverter")
                        .WithMany()
                        .HasForeignKey("RegisteredInverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Inverter");

                    b.Navigation("RegisteredInverter");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterPublishedMessages", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.RegisteredInverter", "RegisteredInverter")
                        .WithMany()
                        .HasForeignKey("RegisteredInverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredInverter");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterTypeActions", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.InverterType", "InverterType")
                        .WithMany()
                        .HasForeignKey("InverterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InverterType");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterTypeCommands", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.InverterType", "InverterType")
                        .WithMany()
                        .HasForeignKey("InverterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InverterType");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterTypeCompanyActions", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.InverterTypeActions", "InverterTypeActions")
                        .WithMany()
                        .HasForeignKey("InverterTypeActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.InverterType", "InverterType")
                        .WithMany()
                        .HasForeignKey("InverterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Inverter");

                    b.Navigation("InverterType");

                    b.Navigation("InverterTypeActions");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.InverterTypeListenTopics", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.InverterType", "InverterType")
                        .WithMany()
                        .HasForeignKey("InverterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InverterType");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.MqttMessageLog", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inverter");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Region", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Sensor", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.SofarStateHourly", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("SmartElectricityAPI.Models.RegisteredInverter", "RegisteredInverter")
                        .WithMany()
                        .HasForeignKey("RegisteredInverterId");

                    b.Navigation("Company");

                    b.Navigation("RegisteredInverter");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.SofarStateHourlyTemp", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("SmartElectricityAPI.Models.RegisteredInverter", "RegisteredInverter")
                        .WithMany()
                        .HasForeignKey("RegisteredInverterId");

                    b.Navigation("Company");

                    b.Navigation("RegisteredInverter");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Switch", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.SwitchGroup", "SensorGroup")
                        .WithMany()
                        .HasForeignKey("SensorGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartElectricityAPI.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Sensor");

                    b.Navigation("SensorGroup");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.SwitchGroup", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.ThirdParty.SpotHintaFi.SpotPrice", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("SmartElectricityAPI.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.User", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Company", "Company")
                        .WithOne()
                        .HasForeignKey("SmartElectricityAPI.Models.User", "SelectedCompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.WeatherForecastData", b =>
                {
                    b.HasOne("SmartElectricityAPI.Models.Inverter", "Inverter")
                        .WithMany()
                        .HasForeignKey("InverterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inverter");
                });

            modelBuilder.Entity("SmartElectricityAPI.Models.Inverter", b =>
                {
                    b.Navigation("InverterBattery");
                });
#pragma warning restore 612, 618
        }
    }
}
